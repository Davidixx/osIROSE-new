CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

# Prepare testing infrastructure.

INCLUDE_DIRECTORIES(
    SYSTEM ${GTEST_INCLUDE_DIR}
    SYSTEM ${GMOCK_INCLUDE_DIR}
    SYSTEM ${PROTOBUF_INCLUDE_DIR}
	SYSTEM ${ASIO_INCLUDE_DIR}
)

LINK_DIRECTORIES(${GTEST_BINARY_DIR} ${GMOCK_BINARY_DIR})

# Configure some handy variables.
SET(PROJECT osirose-tests)
SET(CMAKE_BUILD_TYPE "Debug")

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DASIO_STANDALONE")
set(GCC_LINK_FLAGS "")
set(Clang_LINK_FLAGS "")
set(MSVC_LINK_FLAGS " /NODEFAULTLIB:MSVCRTD /NODEFAULTLIB:MSVCRT")

IF (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
foreach(flag_var
        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
   if(${flag_var} MATCHES "/MD")
      string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
   endif(${flag_var} MATCHES "/MD")
endforeach(flag_var)
ELSE()
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra")
ENDIF()

IF (${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-packed-bitfield-compat")
ELSEIF( ${CMAKE_CXX_COMPILER_ID} STREQUAL Clang )
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-keyword-compat")
ENDIF()

ADD_DEFINITIONS(-DSERVER_TESTING)

file(GLOB_RECURSE CORE_HEADERS . ${CMAKE_SOURCE_DIR}/src/core/*.[h])
file(GLOB_RECURSE ROSE_HEADERS . ${CMAKE_SOURCE_DIR}/src/rosecommon/*.[h])
file(GLOB_RECURSE LOGIN_HEADERS . ${CMAKE_SOURCE_DIR}/src/login/*.[h])
file(GLOB_RECURSE CHAR_HEADERS . ${CMAKE_SOURCE_DIR}/src/char/*.[h])
file(GLOB_RECURSE MAP_HEADERS . ${CMAKE_SOURCE_DIR}/src/map/*.[h])
file(GLOB_RECURSE PROJECT_TESTING_HEADERS . *.[h])

SET(HEADERS
    ${CORE_HEADERS}
    ${ROSE_HEADERS}
    ${PROJECT_TESTING_HEADERS}
)

message(STATUS "HEADERS=${HEADERS}")

SET(SOURCE_MAIN main)

SET(SOURCES_BASE
	src/test_crosecrypt
	src/test_network_asio
	src/test_crose_network
	src/test_logconsole
)

SET(SOURCES
    ${SOURCE_MAIN}
    ${SOURCES_BASE}
)

PROJECT(${PROJECT})

INCLUDE_DIRECTORIES(
    ${CMAKE_SOURCE_DIR}/src/core/include
    ${CMAKE_SOURCE_DIR}/src/rosecommon/include
    ${CMAKE_SOURCE_DIR}/src/login/include
    ${CMAKE_SOURCE_DIR}/src/char/include
    ${CMAKE_SOURCE_DIR}/src/map/include
    ${CMAKE_SOURCE_DIR}/tools/
    ${CMAKE_SOURCE_DIR}/src/tests
)

FIND_PACKAGE( Threads REQUIRED )

ADD_EXECUTABLE(${PROJECT} ${HEADERS} ${SOURCES})

ADD_DEPENDENCIES(${PROJECT} gtest)
ADD_DEPENDENCIES(${PROJECT} gmock)
ADD_DEPENDENCIES(${PROJECT} Core)
ADD_DEPENDENCIES(${PROJECT} RoseCommon)

SET_TARGET_PROPERTIES(${PROJECT} PROPERTIES LINK_FLAGS
                "${${CMAKE_CXX_COMPILER_ID}_LINK_FLAGS}")

IF(ENABLE_TESTING_COVERAGE)
    INCLUDE(CodeCoverage)
    SETUP_TARGET_FOR_COVERAGE(coverage ${PROJECT} coverage)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage")
ENDIF() # ENABLE_TESTING_COVERAGE

TARGET_LINK_LIBRARIES(${PROJECT}
    ${CMAKE_THREAD_LIBS_INIT}
    Core
    RoseCommon
    gtest
    gmock
    ${COVERAGE_LIBRARIES}
)
