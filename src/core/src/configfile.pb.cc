// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configfile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "configfile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace configFile {

namespace {

const ::google::protobuf::Descriptor* Database_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Database_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Configuration_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_configfile_2eproto() {
  protobuf_AddDesc_configfile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "configfile.proto");
  GOOGLE_CHECK(file != NULL);
  Database_descriptor_ = file->message_type(0);
  static const int Database_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, database_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, port_),
  };
  Database_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Database_descriptor_,
      Database::default_instance_,
      Database_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, _has_bits_[0]),
      -1,
      -1,
      sizeof(Database),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, _internal_metadata_),
      -1);
  ServerData_descriptor_ = file->message_type(1);
  static const int ServerData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerData, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerData, accesslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerData, parentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerData, maxconnections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerData, usethreads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerData, mode_),
  };
  ServerData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerData_descriptor_,
      ServerData::default_instance_,
      ServerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerData, _internal_metadata_),
      -1);
  Configuration_descriptor_ = file->message_type(2);
  static const int Configuration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, database_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, serverdata_),
  };
  Configuration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Configuration_descriptor_,
      Configuration::default_instance_,
      Configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _has_bits_[0]),
      -1,
      -1,
      sizeof(Configuration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_configfile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Database_descriptor_, &Database::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerData_descriptor_, &ServerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Configuration_descriptor_, &Configuration::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_configfile_2eproto() {
  delete Database::default_instance_;
  delete Database_reflection_;
  delete Database::_default_host_;
  delete Database::_default_database_;
  delete Database::_default_user_;
  delete Database::_default_password_;
  delete ServerData::default_instance_;
  delete ServerData_reflection_;
  delete ServerData::_default_ip_;
  delete Configuration::default_instance_;
  delete Configuration_reflection_;
}

void protobuf_AddDesc_configfile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020configfile.proto\022\nconfigFile\"~\n\010Databa"
    "se\022\027\n\004host\030\001 \002(\t:\tlocalhost\022\031\n\010database\030"
    "\002 \002(\t:\007osirose\022\022\n\004user\030\003 \002(\t:\004root\022\026\n\010pa"
    "ssword\030\004 \002(\t:\004root\022\022\n\004port\030\005 \002(\005:\0043306\"\252"
    "\001\n\nServerData\022\r\n\002id\030\001 \002(\005:\0010\022\025\n\002ip\030\002 \002(\t"
    ":\t127.0.0.1\022\030\n\013accessLevel\030\003 \002(\005:\003100\022\023\n"
    "\010parentId\030\004 \002(\005:\0010\022\033\n\016maxConnections\030\005 \002"
    "(\005:\003100\022\031\n\nuseThreads\030\006 \002(\010:\005false\022\017\n\004mo"
    "de\030\007 \002(\005:\0010\"c\n\rConfiguration\022&\n\010database"
    "\030\001 \002(\0132\024.configFile.Database\022*\n\nserverda"
    "ta\030\002 \002(\0132\026.configFile.ServerData", 432);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "configfile.proto", &protobuf_RegisterTypes);
  Database::_default_host_ =
      new ::std::string("localhost", 9);
  Database::_default_database_ =
      new ::std::string("osirose", 7);
  Database::_default_user_ =
      new ::std::string("root", 4);
  Database::_default_password_ =
      new ::std::string("root", 4);
  Database::default_instance_ = new Database();
  ServerData::_default_ip_ =
      new ::std::string("127.0.0.1", 9);
  ServerData::default_instance_ = new ServerData();
  Configuration::default_instance_ = new Configuration();
  Database::default_instance_->InitAsDefaultInstance();
  ServerData::default_instance_->InitAsDefaultInstance();
  Configuration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_configfile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_configfile_2eproto {
  StaticDescriptorInitializer_configfile_2eproto() {
    protobuf_AddDesc_configfile_2eproto();
  }
} static_descriptor_initializer_configfile_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

::std::string* Database::_default_host_ = NULL;
::std::string* Database::_default_database_ = NULL;
::std::string* Database::_default_user_ = NULL;
::std::string* Database::_default_password_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Database::kHostFieldNumber;
const int Database::kDatabaseFieldNumber;
const int Database::kUserFieldNumber;
const int Database::kPasswordFieldNumber;
const int Database::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Database::Database()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:configFile.Database)
}

void Database::InitAsDefaultInstance() {
}

Database::Database(const Database& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:configFile.Database)
}

void Database::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_.UnsafeSetDefault(_default_host_);
  database_.UnsafeSetDefault(_default_database_);
  user_.UnsafeSetDefault(_default_user_);
  password_.UnsafeSetDefault(_default_password_);
  port_ = 3306;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Database::~Database() {
  // @@protoc_insertion_point(destructor:configFile.Database)
  SharedDtor();
}

void Database::SharedDtor() {
  host_.DestroyNoArena(_default_host_);
  database_.DestroyNoArena(_default_database_);
  user_.DestroyNoArena(_default_user_);
  password_.DestroyNoArena(_default_password_);
  if (this != default_instance_) {
  }
}

void Database::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Database::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Database_descriptor_;
}

const Database& Database::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configfile_2eproto();
  return *default_instance_;
}

Database* Database::default_instance_ = NULL;

Database* Database::New(::google::protobuf::Arena* arena) const {
  Database* n = new Database;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Database::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    if (has_host()) {
      host_.ClearToDefaultNoArena(_default_host_);
    }
    if (has_database()) {
      database_.ClearToDefaultNoArena(_default_database_);
    }
    if (has_user()) {
      user_.ClearToDefaultNoArena(_default_user_);
    }
    if (has_password()) {
      password_.ClearToDefaultNoArena(_default_password_);
    }
    port_ = 3306;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Database::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:configFile.Database)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1 [default = "localhost"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "configFile.Database.host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_database;
        break;
      }

      // required string database = 2 [default = "osirose"];
      case 2: {
        if (tag == 18) {
         parse_database:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->database().data(), this->database().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "configFile.Database.database");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3 [default = "root"];
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "configFile.Database.user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // required string password = 4 [default = "root"];
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "configFile.Database.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // required int32 port = 5 [default = 3306];
      case 5: {
        if (tag == 40) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:configFile.Database)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:configFile.Database)
  return false;
#undef DO_
}

void Database::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:configFile.Database)
  // required string host = 1 [default = "localhost"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configFile.Database.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // required string database = 2 [default = "osirose"];
  if (has_database()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configFile.Database.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->database(), output);
  }

  // required string user = 3 [default = "root"];
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configFile.Database.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user(), output);
  }

  // required string password = 4 [default = "root"];
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configFile.Database.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // required int32 port = 5 [default = 3306];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:configFile.Database)
}

::google::protobuf::uint8* Database::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:configFile.Database)
  // required string host = 1 [default = "localhost"];
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configFile.Database.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required string database = 2 [default = "osirose"];
  if (has_database()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configFile.Database.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->database(), target);
  }

  // required string user = 3 [default = "root"];
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configFile.Database.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // required string password = 4 [default = "root"];
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configFile.Database.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // required int32 port = 5 [default = 3306];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:configFile.Database)
  return target;
}

int Database::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_host()) {
    // required string host = 1 [default = "localhost"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  if (has_database()) {
    // required string database = 2 [default = "osirose"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  if (has_user()) {
    // required string user = 3 [default = "root"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  if (has_password()) {
    // required string password = 4 [default = "root"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_port()) {
    // required int32 port = 5 [default = 3306];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
int Database::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string host = 1 [default = "localhost"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());

    // required string database = 2 [default = "osirose"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());

    // required string user = 3 [default = "root"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());

    // required string password = 4 [default = "root"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required int32 port = 5 [default = 3306];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Database::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Database* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Database>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Database::MergeFrom(const Database& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_has_host();
      host_.AssignWithDefault(_default_host_, from.host_);
    }
    if (from.has_database()) {
      set_has_database();
      database_.AssignWithDefault(_default_database_, from.database_);
    }
    if (from.has_user()) {
      set_has_user();
      user_.AssignWithDefault(_default_user_, from.user_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(_default_password_, from.password_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Database::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Database::CopyFrom(const Database& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Database::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Database::Swap(Database* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Database::InternalSwap(Database* other) {
  host_.Swap(&other->host_);
  database_.Swap(&other->database_);
  user_.Swap(&other->user_);
  password_.Swap(&other->password_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Database::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Database_descriptor_;
  metadata.reflection = Database_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Database

// required string host = 1 [default = "localhost"];
bool Database::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Database::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
void Database::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void Database::clear_host() {
  host_.ClearToDefaultNoArena(_default_host_);
  clear_has_host();
}
 const ::std::string& Database::host() const {
  // @@protoc_insertion_point(field_get:configFile.Database.host)
  return host_.GetNoArena(_default_host_);
}
 void Database::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(_default_host_, value);
  // @@protoc_insertion_point(field_set:configFile.Database.host)
}
 void Database::set_host(const char* value) {
  set_has_host();
  host_.SetNoArena(_default_host_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configFile.Database.host)
}
 void Database::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(_default_host_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configFile.Database.host)
}
 ::std::string* Database::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:configFile.Database.host)
  return host_.MutableNoArena(_default_host_);
}
 ::std::string* Database::release_host() {
  clear_has_host();
  return host_.ReleaseNoArena(_default_host_);
}
 void Database::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(_default_host_, host);
  // @@protoc_insertion_point(field_set_allocated:configFile.Database.host)
}

// required string database = 2 [default = "osirose"];
bool Database::has_database() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Database::set_has_database() {
  _has_bits_[0] |= 0x00000002u;
}
void Database::clear_has_database() {
  _has_bits_[0] &= ~0x00000002u;
}
void Database::clear_database() {
  database_.ClearToDefaultNoArena(_default_database_);
  clear_has_database();
}
 const ::std::string& Database::database() const {
  // @@protoc_insertion_point(field_get:configFile.Database.database)
  return database_.GetNoArena(_default_database_);
}
 void Database::set_database(const ::std::string& value) {
  set_has_database();
  database_.SetNoArena(_default_database_, value);
  // @@protoc_insertion_point(field_set:configFile.Database.database)
}
 void Database::set_database(const char* value) {
  set_has_database();
  database_.SetNoArena(_default_database_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configFile.Database.database)
}
 void Database::set_database(const char* value, size_t size) {
  set_has_database();
  database_.SetNoArena(_default_database_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configFile.Database.database)
}
 ::std::string* Database::mutable_database() {
  set_has_database();
  // @@protoc_insertion_point(field_mutable:configFile.Database.database)
  return database_.MutableNoArena(_default_database_);
}
 ::std::string* Database::release_database() {
  clear_has_database();
  return database_.ReleaseNoArena(_default_database_);
}
 void Database::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    set_has_database();
  } else {
    clear_has_database();
  }
  database_.SetAllocatedNoArena(_default_database_, database);
  // @@protoc_insertion_point(field_set_allocated:configFile.Database.database)
}

// required string user = 3 [default = "root"];
bool Database::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Database::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
void Database::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
void Database::clear_user() {
  user_.ClearToDefaultNoArena(_default_user_);
  clear_has_user();
}
 const ::std::string& Database::user() const {
  // @@protoc_insertion_point(field_get:configFile.Database.user)
  return user_.GetNoArena(_default_user_);
}
 void Database::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(_default_user_, value);
  // @@protoc_insertion_point(field_set:configFile.Database.user)
}
 void Database::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(_default_user_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configFile.Database.user)
}
 void Database::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(_default_user_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configFile.Database.user)
}
 ::std::string* Database::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:configFile.Database.user)
  return user_.MutableNoArena(_default_user_);
}
 ::std::string* Database::release_user() {
  clear_has_user();
  return user_.ReleaseNoArena(_default_user_);
}
 void Database::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(_default_user_, user);
  // @@protoc_insertion_point(field_set_allocated:configFile.Database.user)
}

// required string password = 4 [default = "root"];
bool Database::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Database::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
void Database::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
void Database::clear_password() {
  password_.ClearToDefaultNoArena(_default_password_);
  clear_has_password();
}
 const ::std::string& Database::password() const {
  // @@protoc_insertion_point(field_get:configFile.Database.password)
  return password_.GetNoArena(_default_password_);
}
 void Database::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(_default_password_, value);
  // @@protoc_insertion_point(field_set:configFile.Database.password)
}
 void Database::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(_default_password_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configFile.Database.password)
}
 void Database::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(_default_password_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configFile.Database.password)
}
 ::std::string* Database::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:configFile.Database.password)
  return password_.MutableNoArena(_default_password_);
}
 ::std::string* Database::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(_default_password_);
}
 void Database::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(_default_password_, password);
  // @@protoc_insertion_point(field_set_allocated:configFile.Database.password)
}

// required int32 port = 5 [default = 3306];
bool Database::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Database::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
void Database::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void Database::clear_port() {
  port_ = 3306;
  clear_has_port();
}
 ::google::protobuf::int32 Database::port() const {
  // @@protoc_insertion_point(field_get:configFile.Database.port)
  return port_;
}
 void Database::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:configFile.Database.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* ServerData::_default_ip_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerData::kIdFieldNumber;
const int ServerData::kIpFieldNumber;
const int ServerData::kAccessLevelFieldNumber;
const int ServerData::kParentIdFieldNumber;
const int ServerData::kMaxConnectionsFieldNumber;
const int ServerData::kUseThreadsFieldNumber;
const int ServerData::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerData::ServerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:configFile.ServerData)
}

void ServerData::InitAsDefaultInstance() {
}

ServerData::ServerData(const ServerData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:configFile.ServerData)
}

void ServerData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  ip_.UnsafeSetDefault(_default_ip_);
  accesslevel_ = 100;
  parentid_ = 0;
  maxconnections_ = 100;
  usethreads_ = false;
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerData::~ServerData() {
  // @@protoc_insertion_point(destructor:configFile.ServerData)
  SharedDtor();
}

void ServerData::SharedDtor() {
  ip_.DestroyNoArena(_default_ip_);
  if (this != default_instance_) {
  }
}

void ServerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerData_descriptor_;
}

const ServerData& ServerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configfile_2eproto();
  return *default_instance_;
}

ServerData* ServerData::default_instance_ = NULL;

ServerData* ServerData::New(::google::protobuf::Arena* arena) const {
  ServerData* n = new ServerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(usethreads_, mode_);
    id_ = 0;
    if (has_ip()) {
      ip_.ClearToDefaultNoArena(_default_ip_);
    }
    accesslevel_ = 100;
    parentid_ = 0;
    maxconnections_ = 100;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:configFile.ServerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2 [default = "127.0.0.1"];
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "configFile.ServerData.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accessLevel;
        break;
      }

      // required int32 accessLevel = 3 [default = 100];
      case 3: {
        if (tag == 24) {
         parse_accessLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accesslevel_)));
          set_has_accesslevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_parentId;
        break;
      }

      // required int32 parentId = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_parentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentid_)));
          set_has_parentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxConnections;
        break;
      }

      // required int32 maxConnections = 5 [default = 100];
      case 5: {
        if (tag == 40) {
         parse_maxConnections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxconnections_)));
          set_has_maxconnections();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_useThreads;
        break;
      }

      // required bool useThreads = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_useThreads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usethreads_)));
          set_has_usethreads();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mode;
        break;
      }

      // required int32 mode = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:configFile.ServerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:configFile.ServerData)
  return false;
#undef DO_
}

void ServerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:configFile.ServerData)
  // required int32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string ip = 2 [default = "127.0.0.1"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configFile.ServerData.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // required int32 accessLevel = 3 [default = 100];
  if (has_accesslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->accesslevel(), output);
  }

  // required int32 parentId = 4 [default = 0];
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->parentid(), output);
  }

  // required int32 maxConnections = 5 [default = 100];
  if (has_maxconnections()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxconnections(), output);
  }

  // required bool useThreads = 6 [default = false];
  if (has_usethreads()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->usethreads(), output);
  }

  // required int32 mode = 7 [default = 0];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:configFile.ServerData)
}

::google::protobuf::uint8* ServerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:configFile.ServerData)
  // required int32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string ip = 2 [default = "127.0.0.1"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configFile.ServerData.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required int32 accessLevel = 3 [default = 100];
  if (has_accesslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->accesslevel(), target);
  }

  // required int32 parentId = 4 [default = 0];
  if (has_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->parentid(), target);
  }

  // required int32 maxConnections = 5 [default = 100];
  if (has_maxconnections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxconnections(), target);
  }

  // required bool useThreads = 6 [default = false];
  if (has_usethreads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->usethreads(), target);
  }

  // required int32 mode = 7 [default = 0];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:configFile.ServerData)
  return target;
}

int ServerData::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_ip()) {
    // required string ip = 2 [default = "127.0.0.1"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_accesslevel()) {
    // required int32 accessLevel = 3 [default = 100];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->accesslevel());
  }

  if (has_parentid()) {
    // required int32 parentId = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parentid());
  }

  if (has_maxconnections()) {
    // required int32 maxConnections = 5 [default = 100];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxconnections());
  }

  if (has_usethreads()) {
    // required bool useThreads = 6 [default = false];
    total_size += 1 + 1;
  }

  if (has_mode()) {
    // required int32 mode = 7 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mode());
  }

  return total_size;
}
int ServerData::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required int32 id = 1 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string ip = 2 [default = "127.0.0.1"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required int32 accessLevel = 3 [default = 100];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->accesslevel());

    // required int32 parentId = 4 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parentid());

    // required int32 maxConnections = 5 [default = 100];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxconnections());

    // required bool useThreads = 6 [default = false];
    total_size += 1 + 1;

    // required int32 mode = 7 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerData::MergeFrom(const ServerData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(_default_ip_, from.ip_);
    }
    if (from.has_accesslevel()) {
      set_accesslevel(from.accesslevel());
    }
    if (from.has_parentid()) {
      set_parentid(from.parentid());
    }
    if (from.has_maxconnections()) {
      set_maxconnections(from.maxconnections());
    }
    if (from.has_usethreads()) {
      set_usethreads(from.usethreads());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerData::CopyFrom(const ServerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ServerData::Swap(ServerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerData::InternalSwap(ServerData* other) {
  std::swap(id_, other->id_);
  ip_.Swap(&other->ip_);
  std::swap(accesslevel_, other->accesslevel_);
  std::swap(parentid_, other->parentid_);
  std::swap(maxconnections_, other->maxconnections_);
  std::swap(usethreads_, other->usethreads_);
  std::swap(mode_, other->mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerData_descriptor_;
  metadata.reflection = ServerData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerData

// required int32 id = 1 [default = 0];
bool ServerData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerData::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 ServerData::id() const {
  // @@protoc_insertion_point(field_get:configFile.ServerData.id)
  return id_;
}
 void ServerData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:configFile.ServerData.id)
}

// required string ip = 2 [default = "127.0.0.1"];
bool ServerData::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerData::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerData::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerData::clear_ip() {
  ip_.ClearToDefaultNoArena(_default_ip_);
  clear_has_ip();
}
 const ::std::string& ServerData::ip() const {
  // @@protoc_insertion_point(field_get:configFile.ServerData.ip)
  return ip_.GetNoArena(_default_ip_);
}
 void ServerData::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(_default_ip_, value);
  // @@protoc_insertion_point(field_set:configFile.ServerData.ip)
}
 void ServerData::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(_default_ip_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configFile.ServerData.ip)
}
 void ServerData::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(_default_ip_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configFile.ServerData.ip)
}
 ::std::string* ServerData::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:configFile.ServerData.ip)
  return ip_.MutableNoArena(_default_ip_);
}
 ::std::string* ServerData::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(_default_ip_);
}
 void ServerData::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(_default_ip_, ip);
  // @@protoc_insertion_point(field_set_allocated:configFile.ServerData.ip)
}

// required int32 accessLevel = 3 [default = 100];
bool ServerData::has_accesslevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerData::set_has_accesslevel() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerData::clear_has_accesslevel() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerData::clear_accesslevel() {
  accesslevel_ = 100;
  clear_has_accesslevel();
}
 ::google::protobuf::int32 ServerData::accesslevel() const {
  // @@protoc_insertion_point(field_get:configFile.ServerData.accessLevel)
  return accesslevel_;
}
 void ServerData::set_accesslevel(::google::protobuf::int32 value) {
  set_has_accesslevel();
  accesslevel_ = value;
  // @@protoc_insertion_point(field_set:configFile.ServerData.accessLevel)
}

// required int32 parentId = 4 [default = 0];
bool ServerData::has_parentid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerData::set_has_parentid() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerData::clear_has_parentid() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerData::clear_parentid() {
  parentid_ = 0;
  clear_has_parentid();
}
 ::google::protobuf::int32 ServerData::parentid() const {
  // @@protoc_insertion_point(field_get:configFile.ServerData.parentId)
  return parentid_;
}
 void ServerData::set_parentid(::google::protobuf::int32 value) {
  set_has_parentid();
  parentid_ = value;
  // @@protoc_insertion_point(field_set:configFile.ServerData.parentId)
}

// required int32 maxConnections = 5 [default = 100];
bool ServerData::has_maxconnections() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerData::set_has_maxconnections() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerData::clear_has_maxconnections() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerData::clear_maxconnections() {
  maxconnections_ = 100;
  clear_has_maxconnections();
}
 ::google::protobuf::int32 ServerData::maxconnections() const {
  // @@protoc_insertion_point(field_get:configFile.ServerData.maxConnections)
  return maxconnections_;
}
 void ServerData::set_maxconnections(::google::protobuf::int32 value) {
  set_has_maxconnections();
  maxconnections_ = value;
  // @@protoc_insertion_point(field_set:configFile.ServerData.maxConnections)
}

// required bool useThreads = 6 [default = false];
bool ServerData::has_usethreads() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerData::set_has_usethreads() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerData::clear_has_usethreads() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerData::clear_usethreads() {
  usethreads_ = false;
  clear_has_usethreads();
}
 bool ServerData::usethreads() const {
  // @@protoc_insertion_point(field_get:configFile.ServerData.useThreads)
  return usethreads_;
}
 void ServerData::set_usethreads(bool value) {
  set_has_usethreads();
  usethreads_ = value;
  // @@protoc_insertion_point(field_set:configFile.ServerData.useThreads)
}

// required int32 mode = 7 [default = 0];
bool ServerData::has_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ServerData::set_has_mode() {
  _has_bits_[0] |= 0x00000040u;
}
void ServerData::clear_has_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
void ServerData::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::google::protobuf::int32 ServerData::mode() const {
  // @@protoc_insertion_point(field_get:configFile.ServerData.mode)
  return mode_;
}
 void ServerData::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:configFile.ServerData.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Configuration::kDatabaseFieldNumber;
const int Configuration::kServerdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Configuration::Configuration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:configFile.Configuration)
}

void Configuration::InitAsDefaultInstance() {
  database_ = const_cast< ::configFile::Database*>(&::configFile::Database::default_instance());
  serverdata_ = const_cast< ::configFile::ServerData*>(&::configFile::ServerData::default_instance());
}

Configuration::Configuration(const Configuration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:configFile.Configuration)
}

void Configuration::SharedCtor() {
  _cached_size_ = 0;
  database_ = NULL;
  serverdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:configFile.Configuration)
  SharedDtor();
}

void Configuration::SharedDtor() {
  if (this != default_instance_) {
    delete database_;
    delete serverdata_;
  }
}

void Configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configuration_descriptor_;
}

const Configuration& Configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configfile_2eproto();
  return *default_instance_;
}

Configuration* Configuration::default_instance_ = NULL;

Configuration* Configuration::New(::google::protobuf::Arena* arena) const {
  Configuration* n = new Configuration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Configuration::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_database()) {
      if (database_ != NULL) database_->::configFile::Database::Clear();
    }
    if (has_serverdata()) {
      if (serverdata_ != NULL) serverdata_->::configFile::ServerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:configFile.Configuration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .configFile.Database database = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_database()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serverdata;
        break;
      }

      // required .configFile.ServerData serverdata = 2;
      case 2: {
        if (tag == 18) {
         parse_serverdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:configFile.Configuration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:configFile.Configuration)
  return false;
#undef DO_
}

void Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:configFile.Configuration)
  // required .configFile.Database database = 1;
  if (has_database()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->database_, output);
  }

  // required .configFile.ServerData serverdata = 2;
  if (has_serverdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->serverdata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:configFile.Configuration)
}

::google::protobuf::uint8* Configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:configFile.Configuration)
  // required .configFile.Database database = 1;
  if (has_database()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->database_, target);
  }

  // required .configFile.ServerData serverdata = 2;
  if (has_serverdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->serverdata_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:configFile.Configuration)
  return target;
}

int Configuration::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_database()) {
    // required .configFile.Database database = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->database_);
  }

  if (has_serverdata()) {
    // required .configFile.ServerData serverdata = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->serverdata_);
  }

  return total_size;
}
int Configuration::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .configFile.Database database = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->database_);

    // required .configFile.ServerData serverdata = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->serverdata_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configuration::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Configuration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Configuration>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_database()) {
      mutable_database()->::configFile::Database::MergeFrom(from.database());
    }
    if (from.has_serverdata()) {
      mutable_serverdata()->::configFile::ServerData::MergeFrom(from.serverdata());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_database()) {
    if (!this->database_->IsInitialized()) return false;
  }
  if (has_serverdata()) {
    if (!this->serverdata_->IsInitialized()) return false;
  }
  return true;
}

void Configuration::Swap(Configuration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Configuration::InternalSwap(Configuration* other) {
  std::swap(database_, other->database_);
  std::swap(serverdata_, other->serverdata_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Configuration_descriptor_;
  metadata.reflection = Configuration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Configuration

// required .configFile.Database database = 1;
bool Configuration::has_database() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Configuration::set_has_database() {
  _has_bits_[0] |= 0x00000001u;
}
void Configuration::clear_has_database() {
  _has_bits_[0] &= ~0x00000001u;
}
void Configuration::clear_database() {
  if (database_ != NULL) database_->::configFile::Database::Clear();
  clear_has_database();
}
const ::configFile::Database& Configuration::database() const {
  // @@protoc_insertion_point(field_get:configFile.Configuration.database)
  return database_ != NULL ? *database_ : *default_instance_->database_;
}
::configFile::Database* Configuration::mutable_database() {
  set_has_database();
  if (database_ == NULL) {
    database_ = new ::configFile::Database;
  }
  // @@protoc_insertion_point(field_mutable:configFile.Configuration.database)
  return database_;
}
::configFile::Database* Configuration::release_database() {
  clear_has_database();
  ::configFile::Database* temp = database_;
  database_ = NULL;
  return temp;
}
void Configuration::set_allocated_database(::configFile::Database* database) {
  delete database_;
  database_ = database;
  if (database) {
    set_has_database();
  } else {
    clear_has_database();
  }
  // @@protoc_insertion_point(field_set_allocated:configFile.Configuration.database)
}

// required .configFile.ServerData serverdata = 2;
bool Configuration::has_serverdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Configuration::set_has_serverdata() {
  _has_bits_[0] |= 0x00000002u;
}
void Configuration::clear_has_serverdata() {
  _has_bits_[0] &= ~0x00000002u;
}
void Configuration::clear_serverdata() {
  if (serverdata_ != NULL) serverdata_->::configFile::ServerData::Clear();
  clear_has_serverdata();
}
const ::configFile::ServerData& Configuration::serverdata() const {
  // @@protoc_insertion_point(field_get:configFile.Configuration.serverdata)
  return serverdata_ != NULL ? *serverdata_ : *default_instance_->serverdata_;
}
::configFile::ServerData* Configuration::mutable_serverdata() {
  set_has_serverdata();
  if (serverdata_ == NULL) {
    serverdata_ = new ::configFile::ServerData;
  }
  // @@protoc_insertion_point(field_mutable:configFile.Configuration.serverdata)
  return serverdata_;
}
::configFile::ServerData* Configuration::release_serverdata() {
  clear_has_serverdata();
  ::configFile::ServerData* temp = serverdata_;
  serverdata_ = NULL;
  return temp;
}
void Configuration::set_allocated_serverdata(::configFile::ServerData* serverdata) {
  delete serverdata_;
  serverdata_ = serverdata;
  if (serverdata) {
    set_has_serverdata();
  } else {
    clear_has_serverdata();
  }
  // @@protoc_insertion_point(field_set_allocated:configFile.Configuration.serverdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace configFile

// @@protoc_insertion_point(global_scope)
