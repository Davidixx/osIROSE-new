CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
PROJECT("osIROSE")

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")

SET(VERSION_MAJOR 1)
SET(VERSION_MINOR 0)
SET(VERSION_PATCH 0)
SET(VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")

# Evaluate ABI version number.
MATH(EXPR PROJECT_ABI_VERSION_SUFFIX "${VERSION_MAJOR} * 10000 + ${VERSION_MINOR} * 100 + ${VERSION_PATCH} * 1")

SET(PROJECT_ABI_VERSION v${PROJECT_ABI_VERSION_SUFFIX})

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

OPTION(PROJECT_DEBUG "Enable debugging messages support" ON)
OPTION(ENABLE_TESTING "Enable testing" OFF)
OPTION(ENABLE_TESTING_COVERAGE, "Enable generating code coverage report" OFF)

find_package(MySQL REQUIRED)

IF(ENABLE_TESTING)
	SET(CMAKE_RULE_MESSAGES OFF)	
	IF (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
		#Build GoogleTest
		ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/tools/googletest/googletest)
		
		#Build Protobuf
#		ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/tools/protobuf/cmake)
#		SET(PROTOBUF_INCLUDE_DIR ${protobuf_SOURCE_DIR}/../src)
#		SET(PROTOBUF_BINARY_DIR ${protobuf_BINARY_DIR})
#		SET(GMOCK_INCLUDE_DIR ${gmock_SOURCE_DIR}/include)
#		SET(GMOCK_BINARY_DIR ${gmock_SOURCE_DIR})
#		SET(GTEST_INCLUDE_DIR ${gtest_SOURCE_DIR}/include)
#		SET(GTEST_BINARY_DIR ${gtest_SOURCE_DIR})
	ELSE()
		#Build GoogleMock
		ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/tools/googletest/googlemock)
		SET(GMOCK_INCLUDE_DIR ${gmock_SOURCE_DIR}/include)
		SET(GMOCK_BINARY_DIR ${gmock_SOURCE_DIR})
		SET(GTEST_INCLUDE_DIR ${gtest_SOURCE_DIR}/include)
		SET(GTEST_BINARY_DIR ${gtest_SOURCE_DIR})
	ENDIF()
	SET(CMAKE_RULE_MESSAGES ON)
ENDIF()

SET(ASIO_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/tools/asio/asio/include)
SET(EXTERNAL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/3rdParty/include)
SET(EXTERNAL_BINARY_DIR ${CMAKE_SOURCE_DIR}/3rdParty/lib)

IF (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
	#------------
	#WINDOWS ONLY SETTINGS!!!!
	#------------
	#Build Protobuf
	OPTION(MYSQL_C_INLCUDE_DIR "Path to MYSQL Connector C includes" "C:/Program Files/MySQL/MySQL Connector C 6.1/include")
	OPTION(MYSQL_C_BINARY_DIR "Path to MYSQL Connector C libs" "C:/Program Files/MySQL/MySQL Connector C 6.1/lib/opt")
	ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/mysqlpp)
#        ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/tools/protobuf/cmake)
#	SET(PROTOBUF_ROOT ${protobuf_SOURCE_DIR})
#        SET(PROTOBUF_INCLUDE_DIR ${protobuf_SOURCE_DIR}/../src)
#        SET(PROTOBUF_BINARY_DIR ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
#	SET(PROTOBUF_PROTOC_EXECUTABLE ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/protoc.exe)
        SET(GMOCK_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/tools/googletest/googlemock/include)
        SET(GMOCK_BINARY_DIR ${gmock_SOURCE_DIR})
        SET(GTEST_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/tools/googletest/googletest/include)
	SET(GTEST_BINARY_DIR ${gtest_SOURCE_DIR})
ELSE()
	#UNIX ONLY SETTINGS

	#Set Protobuf Paths
	SET(PROTOBUF_ROOT ${CMAKE_SOURCE_DIR}/protobuf)
	SET(PROTOBUF_BINARY_DIR ${PROTOBUF_ROOT}/lib)
	SET(MYSQL_INCLUDE_DIR /usr/include/mysql)
	SET(MYSQL++_INCLUDE_DIR /usr/include/mysql++)
	SET(MYSQL_BINARY_DIR /usr/lib)
	SET(LINK_FLAGS "${LINK_FLAGS} -lnsl -lz -lm")
ENDIF()


#LIST(APPEND CMAKE_PREFIX_PATH "${PROTOBUF_ROOT}")
find_package(ProtocolBuffer REQUIRED)
#find_package(Protobuf REQUIRED)

ADD_SUBDIRECTORY(src)

